<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bikeseoul.bikeseoul_kw.dao.RentDao">
    <select id="getRentList" resultType="com.bikeseoul.bikeseoul_kw.container.Rent">
        SELECT
            uid, member_uid, bike_uid, ticket_detail_uid, start_date, return_date, rent_station, return_station, last_position_lat, last_position_lon, distance, update_date
        FROM
            rent
        <trim prefix="WHERE" suffixOverrides="AND|OR">
            	member_uid = #{member_uid}
           	<if test="start_date != null and end_date != null">
        		AND
            		return_date BETWEEN #{start_date} AND #{end_date}
            </if>
        </trim>
    </select>
    <select id="getRentInfo" resultType="com.bikeseoul.bikeseoul_kw.container.Rent">
        SELECT
            uid,
            member_uid,
            bike_uid,
            ticket_detail_uid,
            start_date,
            return_date,
            rent_station,
            return_station,
            last_position_lat,
            last_position_lon,
            distance,
            update_date
        FROM
            rent
        <trim prefix="WHERE" suffixOverrides="AND|OR">
           	<if test="rent_uid > 0">
        		uid = #{rent_uid} AND
            </if>
            <if test="bike_uid > 0">
        		bike_uid = #{bike_uid} AND
            </if>
            <if test="ticket_detail_uid > 0">
        		ticket_detail_uid = #{ticket_detail_uid}
            </if>
        </trim>
        ORDER BY
        	uid DESC
    </select>
    <select id="getOverdueList" resultType="HashMap">
        SELECT
			od.uid AS overdue_uid,
			od.overdue_amount AS overdue_amount,
			od.payment_finished AS payment_finished,
			od.created_date AS created_date,
			od.update_date AS update_date,
			r.uid AS uid,
			r.bike_uid AS bike_uid,
			r.ticket_detail_uid AS ticket_detail_uid,
			r.start_date AS start_date,
			r.return_date AS return_date,
			r.rent_station AS rent_station,
			r.return_station AS return_station,
			r.distance AS distance
        FROM
            overdue AS od
        JOIN
        	rent AS r
       	ON
       		od.rent_uid = r.uid
        WHERE
        	r.member_uid = #{member_uid} AND
        	od.payment_finished = #{payment_finished}
        ORDER BY
        	r.uid ASC
    </select>
    <select id="getBikeInfo" resultType="com.bikeseoul.bikeseoul_kw.container.Bike">
        SELECT
			bike_id,
			bike_type,
			station_uid,
			status_,
			inspection_date,
			release_date,
			update_date
        FROM
            bike
        WHERE
        	bike_id = #{uid}
    </select>

	<select id="getBikeList" resultType="com.bikeseoul.bikeseoul_kw.container.Bike">
		SELECT
			b.bike_id,
			b.bike_type,
			b.station_uid,
			b.status_,
			b.inspection_date,
			b.release_date,
			b.update_date
		FROM
			bike AS b
		JOIN
			station AS s
		ON
			station_uid.uid = s.uid
		<if test="station_name != null">
			WHERE
				s.station_name = #{station_name}
		</if>
		LIMIT 0, 10000
	</select>

    <update id="updateBikeInfo" parameterType="com.bikeseoul.bikeseoul_kw.container.Bike">
		UPDATE
			bike
			<trim prefix="SET" suffixOverrides=",">
				<if test="bike_type != null">
					bike_type = #{bike_type},
				</if>
				<if test="station_uid > 0">
					station_uid = #{station_uid},
				</if>
				<if test="status_ != null">
					status_ = #{status_},
				</if>
				<if test="inspection_date != null">
					inspection_date = #{inspection_date},
				</if>
				<if test="release_date != null">
					release_date = #{release_date},
				</if>
				update_date = NOW()
			</trim>	
		WHERE
			bike_id = #{bike_id}
	</update>
    <insert id="insertRentInfo" parameterType="com.bikeseoul.bikeseoul_kw.container.Rent">
		<![CDATA[
			INSERT INTO rent
				(
					bike_uid,
					member_uid,
					ticket_detail_uid,
					rent_station,
					last_position_lat,
					last_position_lon
				) VALUES (
					#{bike_uid},
					#{member_uid},
					#{ticket_detail_uid},
					#{rent_station},
					#{last_position_lat},
					#{last_position_lon}
				)
		
		]]>
	
	</insert>
	 <insert id="insertOverdue" parameterType="com.bikeseoul.bikeseoul_kw.container.Overdue">
		<![CDATA[
			INSERT INTO overdue
				(
					rent_uid,
					overdue_amount
				) VALUES (
					#{rent_uid},
					#{overdue_amount}
				)
		
		]]>
	
	</insert>
    <update id="updateOverdue" parameterType="com.bikeseoul.bikeseoul_kw.container.Overdue">
		UPDATE
			overdue
			<trim prefix="SET" suffixOverrides=",">
				<if test="overdue_amount > 0">
					overdue_amount = #{overdue_amount},
				</if>
				<if test="payment_finished lt 2">
					payment_finished = #{payment_finished},
				</if>
				update_date = NOW()
			</trim>	
		WHERE
			uid = #{uid}
	</update>
	<update id="updateRent" parameterType="com.bikeseoul.bikeseoul_kw.container.Rent">
		UPDATE
			rent
			<trim prefix="SET" suffixOverrides=",">
				<if test="return_station > 0">
					return_date = NOW(),
					return_station = #{return_station},
				</if>
				<if test="last_position_lat > 0 and last_position_lon > 0 and distance > 0">
					last_position_lat = #{last_position_lat},
					last_position_lon = #{last_position_lon},
					distance = #{distance},
				</if>
				update_date = NOW()
			</trim>	
		WHERE
			uid = #{uid}
	</update>
	<select id="getBreakdownList" resultType="com.bikeseoul.bikeseoul_kw.container.Breakdown">
		SELECT
			uid,
			member_uid,
			bike_uid,
			break_type,
			content,
			created_date
		FROM
			breakdown
		<if test="member_uid > 0">
			WHERE
				member_uid = #{member_uid}
		</if>
	</select>
	<select id="getNeglectList" resultType="com.bikeseoul.bikeseoul_kw.container.Neglect">
		SELECT
			uid,
			bike_uid,
			lat,
			lon,
			detail_address,
			created_date
		FROM
			neglect
		<if test="member_uid > 0">
			WHERE
				member_uid = #{member_uid}
		</if>
	</select>
</mapper>

